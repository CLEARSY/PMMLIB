/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

-->begin

#if !defined(-->prefixCOCO_PARSER_H__)
#define -->prefixCOCO_PARSER_H__

-->headerdef

#include "Scanner.h"

-->namespace_open



class Errors {
public:
	int count;			// number of errors detected
	std::string fileName;

	theory::ErrorHandler *errorHandler;

	void setFileName(const std::string &fileName);
	void setErrorHandler(theory::ErrorHandler *errorHandler);

	Errors();
	void SynErr(int line, int col, int n);
	void Error(int line, int col, wchar_t *s);
	void Warning(int line, int col, wchar_t *s);
	void Warning(wchar_t *s);
	void Exception(wchar_t *s);
	static char *convertString(wchar_t *s);

}; // Errors



class Parser {
private:
-->constantsheader
	Token *dummyToken;
	int errDist;
	int minErrDist;

	void SynErr(int n);
	void Get();
	void Expect(int n);
	bool StartOf(int s);
	void ExpectWeak(int n, int follow);
	bool WeakSeparator(int n, int syFol, int repFol);
	
	
	std::string fileName;

	theory::ErrorHandler *errorHandler;

public:
	Scanner *scanner;
	Errors *errors;

	Token *t;			// last recognized token
	Token *la;			// lookahead token
	
	
	void init();
	void end();
	

	void setHandler(theory::ErrorHandler *handler)
	{
		errorHandler=handler;
	}

	void setFileName(const std::string &file_name) {
		fileName=file_name;
	}
	
-->declarations

	Parser(Scanner *scanner);
	~Parser();
	void SemErr(wchar_t* msg);

-->productionsheader
	void Parse();

}; // end Parser

-->namespace_close

#endif // !defined(-->prefixCOCO_PARSER_H__)

-->implementation
/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/
-->begin
#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"


-->namespace_open

void Parser::SynErr(int n) {
	if (errDist >= minErrDist) errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(wchar_t* msg) {
	if (errDist >= minErrDist) errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }
-->pragmas
		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

-->productions

void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
-->parseRoot
	Expect(0);
}

void Parser::init() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
}

void Parser::end() {
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
-->constants
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

-->initialization

	return set[s][la->kind];
}

Parser::~Parser() {
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	char *tmp;
	std::string message;
	switch (n) {
-->errors
		default:
		{
			wchar_t format[20];
			//coco_swprintf(format, 20, L"error %d", n);
			printf("error %d",n);
			s = coco_string_create(format);
		}
		break;
	}
	//wprintf(L"-- line %d col %d: %ls\n", line, col, s");
	//printf("-- line %d col %d: %ls\n",line,col,s);
	tmp=convertString(s);
	message=std::string(tmp);
	delete [] tmp;
	errorHandler->error(message,fileName,line,col);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, wchar_t *s) {
	//wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	printf("-- line %d col %d: %ls\n",line,col,s);
	count++;
}

void Errors::Warning(int line, int col, wchar_t *s) {
	//wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	printf("-- line %d col %d: %ls\n",line,col,s);
}

void Errors::Warning(wchar_t *s) {
	//wprintf(L"%ls\n", s);
	printf("%ls\n", s);
}

void Errors::Exception(wchar_t* s) {
	//wprintf(L"%ls", s); 
	printf("%ls", s); 
	exit(1);
}

char * Errors::convertString(wchar_t *str) {
	int len=wcslen(str)+1;
	char *ret=new char[len];
	wcstombs(ret,str,len);
	return ret;
	}
	
void Errors::setErrorHandler(ErrorHandler *errorHandler) {
	this->errorHandler=errorHandler;
}

void Errors::setFileName(const std::string &fileName) {
	this->fileName=fileName;
}

-->namespace_close

